{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "import math\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 1. Python"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Task 1** (0.5 points)<br/> \n",
    "Enter numbers `a`,  `d` Ð¸ `N`. Find sum of the first `N` members of arithmetic progression with the first member `a` and difference `d`, without using formula for the sum."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "a:1\n",
      "d:1\n",
      "N:10\n",
      "55\n"
     ]
    }
   ],
   "source": [
    "a = int(input('a:'))\n",
    "d = int(input('d:'))\n",
    "N = int(input('N:'))\n",
    "sum = 0\n",
    "for i in range(N):\n",
    "    sum += a\n",
    "    a += d\n",
    "print(sum)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Task 2** (0.5 points) <br/> \n",
    "Enter a number `N`. Find sum of the first `N` memebers of harmonic series."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "N:2\n",
      "1.5\n"
     ]
    }
   ],
   "source": [
    "N = int(input('N:'))\n",
    "sum = 0\n",
    "for i in range(1, N + 1):\n",
    "    sum += 1./i\n",
    "    \n",
    "print(sum)    "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Task 3** (0.5 points) <br/> \n",
    "Enter an integer number `N`. Check if it is a prime number."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "N:1000000007\n",
      "N is prime\n"
     ]
    }
   ],
   "source": [
    "def is_prime(N):\n",
    "    result = True\n",
    "    for i in range(2, round(math.sqrt(N)) + 1):\n",
    "        if N % i == 0:\n",
    "            result = False\n",
    "            break\n",
    "    return result        \n",
    "    \n",
    "N = int(input('N:'))\n",
    "\n",
    "result = is_prime(N)\n",
    "if result:\n",
    "    print('N is prime')\n",
    "else:\n",
    "    print('N is complex')\n",
    "        "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Task 4** (0.5 points) <br/> \n",
    "Enter the first `N` prime numbers."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "N:10\n",
      "2\n",
      "3\n",
      "5\n",
      "7\n",
      "11\n",
      "13\n",
      "17\n",
      "19\n",
      "23\n",
      "29\n"
     ]
    }
   ],
   "source": [
    "N = int(input('N:'))\n",
    "counter = 0\n",
    "num = 2\n",
    "while (counter < N):\n",
    "    if (is_prime(num)):\n",
    "        print(num)\n",
    "        counter += 1\n",
    "    num += 1    "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Task 5** (0.5 points) <br/> \n",
    "There are numbers: `a`, `b`, `c`. Without using functions `min`, `max` and other functions, find the maximum number."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "a: 15\n",
      "b: 10\n",
      "c: 5\n",
      "Max is 15\n"
     ]
    }
   ],
   "source": [
    "a = int(input('a: '))\n",
    "b = int(input('b: '))\n",
    "c = int(input('c: '))  \n",
    "\n",
    "if a > b:\n",
    "    if a > c:\n",
    "        print('Max is', a)\n",
    "    else:\n",
    "        print('Max is', c)\n",
    "elif b > c:\n",
    "    print('Max is', b)\n",
    "else:\n",
    "    print('Max is', c)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 2. Numpy"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Task 1** (0.5 points) <br/>\n",
    "Create two random arrays $a$ and $b$ with the same length. \n",
    "\n",
    "Calculate the following distances between the arrays:\n",
    "\n",
    "* Euclidean Distance\n",
    "$$ d(a, b) = \\sqrt{\\sum_i (a_i - b_i)^2} $$\n",
    "* Manhattan Distance\n",
    "$$ d(a, b) = \\sum_i |a_i - b_i| $$\n",
    "* Cosine Distance\n",
    "$$ d(a, b) = 1 - \\frac{a^\\top b}{||a||_2\\cdot||b||_2}$$\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "N: 10\n",
      "[0.97083254 0.77932907 0.8108478  0.75525865 0.72867298 0.3953304\n",
      " 0.84607828 0.03827674 0.58582176 0.15135774]\n",
      "[0.52377631 0.75761961 0.2951803  0.96209842 0.67061776 0.97739078\n",
      " 0.96501314 0.88883736 0.31021513 0.042617  ]\n",
      "Euclidean: 1.294825613012642\n",
      "Manhattan: 3.1852314070147987\n",
      "Cosine: 0.1727428379091911\n"
     ]
    }
   ],
   "source": [
    "N = int(input('N: '))\n",
    "a = np.random.rand(N)\n",
    "b = np.random.rand(N)\n",
    "print(a)\n",
    "print(b)\n",
    "print('Euclidean:', np.sqrt(np.sum((a-b)**2)))\n",
    "print('Manhattan:', np.sum(abs(a-b)))\n",
    "print('Cosine:', 1 - np.dot(a, b)/(np.linalg.norm(a) * np.linalg.norm(b)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Task 2** (0.5 points) <br/>\n",
    "Create a random array (`np.random.rand()`) with length of 10 and with sum of its elements equals to 2."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0.17512553 0.24944542 0.12015989 0.21359958 0.26830158 0.33334018\n",
      " 0.11779824 0.00967495 0.27437486 0.23817977]\n",
      "2.0\n"
     ]
    }
   ],
   "source": [
    "arr = np.random.rand(10)\n",
    "arr = 2 * arr / arr.sum()\n",
    "print(arr)\n",
    "print(arr.sum())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Task 3** (0.5 points) <br/>\n",
    "Create a random array (`np.random.rand()`) with length of 100. Transform the array so, that \n",
    "* Maximum element(s) value is 1\n",
    "* Minimum element(s) value is 0\n",
    "* Other values are in interval 0-1 with keeping the order"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0.45193772 0.73521712 0.39551012 0.79629368 0.92036942 0.34560573\n",
      " 0.34284092 0.75998223 0.99152762 0.65231884 0.99060939 0.11540312\n",
      " 0.14984674 0.53894507 0.05277462 0.52638869 0.55308362 0.9850205\n",
      " 0.19425556 0.30226028 0.5112318  0.66941219 0.00400106 0.36395099\n",
      " 0.67661672 0.27050404 0.2018177  0.83807987 0.1364843  0.36831066\n",
      " 0.33078401 0.69630618 0.78608624 0.48052513 0.42035499 0.03718886\n",
      " 0.45368509 0.86296002 0.78312584 0.47755181 0.44279079 0.93582014\n",
      " 0.45774813 0.21696315 0.84089196 0.10004671 0.65255703 0.15403554\n",
      " 0.39851923 0.68271634 0.47149586 0.13088161 0.99750192 0.32098993\n",
      " 0.07445361 0.83233981 0.94280266 0.22706358 0.95545934 0.55591661\n",
      " 0.10960151 0.80073374 0.06975431 0.30075858 0.36691484 0.87163227\n",
      " 0.14527874 0.95076758 0.47812731 0.09099158 0.12207569 0.93997307\n",
      " 0.46679461 0.90966749 0.41877557 0.87688131 0.13840092 0.0854742\n",
      " 0.80175542 0.69356825 0.63443861 0.38803766 0.72743451 0.64453024\n",
      " 0.0164675  0.65355634 0.77394987 0.11279615 0.3033828  0.45079375\n",
      " 0.45085322 0.18529501 0.85692262 0.87691271 0.78080234 0.14205287\n",
      " 0.51629745 0.20931699 0.99194222 0.29887157]\n",
      "[0.45086691 0.73599942 0.39407017 0.79747552 0.92236292 0.34383933\n",
      " 0.34105643 0.76092654 0.99398662 0.65255885 0.99306238 0.11213081\n",
      " 0.14679975 0.53844343 0.04909262 0.52580491 0.55267447 0.98743693\n",
      " 0.19149908 0.30021033 0.51054887 0.66976402 0.         0.3623046\n",
      " 0.67701567 0.26824635 0.19911069 0.83953506 0.1333499  0.36669279\n",
      " 0.32892065 0.69683394 0.78720131 0.47964133 0.41907757 0.0334049\n",
      " 0.4526257  0.86457797 0.78422154 0.47664855 0.44166014 0.93791472\n",
      " 0.45671532 0.21435521 0.84236555 0.09667395 0.6527986  0.15101596\n",
      " 0.39709897 0.6831552  0.47055299 0.12771055 1.         0.3190625\n",
      " 0.07091342 0.83375746 0.94494292 0.22452172 0.95768239 0.55552599\n",
      " 0.10629125 0.80194463 0.06618339 0.2986988  0.36528784 0.87330695\n",
      " 0.14220187 0.95295994 0.47722782 0.08755958 0.11884703 0.94209482\n",
      " 0.46582099 0.91159099 0.41748782 0.87859033 0.13527905 0.08200611\n",
      " 0.80297299 0.6940781  0.63456166 0.38654883 0.7281659  0.6447193\n",
      " 0.01254799 0.65380444 0.77498554 0.10950679 0.30134019 0.44971545\n",
      " 0.44977531 0.18247991 0.85850108 0.87862193 0.78188284 0.13895489\n",
      " 0.51564766 0.20665903 0.99440393 0.29679945]\n"
     ]
    }
   ],
   "source": [
    "arr = np.random.rand(100)\n",
    "print(arr)\n",
    "arr -= arr.min()\n",
    "arr /= arr.max()\n",
    "print(arr)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Task 4** (0.5 points) <br/>\n",
    "Create a random array with length of 20 with integers from [0,50]. Select elements that are smaller than 5th percentile and larger than 95th percentile"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[34 26 41 35  7 49  1  5 19 33 37 18 39 31 12 44 48 31  6  2]\n",
      "[1]\n",
      "[49]\n",
      "[ 1 49]\n"
     ]
    }
   ],
   "source": [
    "arr = np.random.randint(0, 50+1, size=20)\n",
    "print(arr)\n",
    "print(arr[arr < np.percentile(arr, 5)])\n",
    "print(arr[arr > np.percentile(arr, 95)])\n",
    "# and that's how we can unite them - may be not the most optimal, but works..\n",
    "print(np.concatenate([arr[arr < np.percentile(arr, 5)], arr[arr > np.percentile(arr, 95)]]))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Task 5** (0.5 points) <br/>\n",
    "Create an array with shape of $5 \\times 6$ with integer from [0,50]. Print a column that contains the maximum element of the array."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[10 30 32 45 30 30]\n",
      " [18 19 17 16 28 44]\n",
      " [36 16 20 46 46 19]\n",
      " [34  0 24 18 44 32]\n",
      " [28 42  6 34 37  6]]\n",
      "15\n",
      "[[45]\n",
      " [16]\n",
      " [46]\n",
      " [18]\n",
      " [34]]\n"
     ]
    }
   ],
   "source": [
    "arr = np.random.randint(0, 51, size=30).reshape(5, 6)\n",
    "print(arr)\n",
    "print(np.argmax(arr))\n",
    "print(arr[:, np.argmax(arr)%arr.shape[1]].reshape(-1, 1))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Task 6** (0.5 points) <br/>\n",
    "\n",
    "Replace all missing values in the following array with mean."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0.95171704        nan 0.72130325 0.05127568        nan        nan\n",
      " 0.89229319 0.89773869 0.80596896 0.78148369]\n",
      "[0.95171704 0.72882579 0.72130325 0.05127568 0.72882579 0.72882579\n",
      " 0.89229319 0.89773869 0.80596896 0.78148369]\n"
     ]
    }
   ],
   "source": [
    "arr = np.random.rand(10)\n",
    "idx = np.random.randint(0, 10, 4)\n",
    "arr[idx] = np.nan\n",
    "print(arr)\n",
    "arr[np.where(np.isnan(arr))] = np.nanmean(arr)\n",
    "print(arr)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Linear Regression"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Download [file 1](https://www.dropbox.com/s/kg9px9v3xfysak9/tutorial_dataset.csv?dl=0) and [file 2](https://www.dropbox.com/s/f87gm612o144emx/tutorial_dataset_2.csv?dl=0) into a directory with this notebook. Using function `loadtxt` in `numpy` load data from the first file. Assign y = D[:,0] Ð°nd X = D[:, 1:].\n",
    "\n",
    "\n",
    "We will use one magic formula to find linear regression coefficients. You will prove this formula on your next lectures of the course.\n",
    "\n",
    "Linear regression model in matrix form looks like: $\\hat{y} = X\\hat{\\beta}$, where\n",
    "\n",
    "$$ \\hat{\\beta} = (X^\\top X)^{-1} X^\\top y $$\n",
    "Model residuals are calculated as\n",
    "$$ \\text{res} = y - \\hat{y} $$\n",
    "\n",
    "\n",
    "**Task 7** (2.5 points)<br/>\n",
    "1. Load the data\n",
    "2. Find parameters $\\hat{\\beta}$ using the formula above\n",
    "3. Make a plot with the model residuals on Y axis and $\\hat{y}$ on X axis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[-1.61282102 -1.57812762 -1.54331266 ...  1.28238194  1.28417963\n",
      "  1.28498082]\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<matplotlib.collections.PathCollection at 0x7f5541b68438>"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "## load data\n",
    "D = np.loadtxt('tutorial_dataset_2.csv', \n",
    "               skiprows=1, \n",
    "               delimiter=',')\n",
    "\n",
    "y = D[:,0]\n",
    "X = D[:,1:]\n",
    "beta = np.linalg.inv(X.T.dot(X)).dot(X.T).dot(y)\n",
    "res = y - X.dot(beta)\n",
    "print(res)\n",
    "plt.scatter(X.dot(beta), res, s=4)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 3. Pandas"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Wine Quality"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Download [sample](https://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/winequality-red.csv) with information about wine characteristics and its quality."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>fixed acidity</th>\n",
       "      <th>volatile acidity</th>\n",
       "      <th>citric acid</th>\n",
       "      <th>residual sugar</th>\n",
       "      <th>chlorides</th>\n",
       "      <th>free sulfur dioxide</th>\n",
       "      <th>total sulfur dioxide</th>\n",
       "      <th>density</th>\n",
       "      <th>pH</th>\n",
       "      <th>sulphates</th>\n",
       "      <th>alcohol</th>\n",
       "      <th>quality</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>7.4</td>\n",
       "      <td>0.70</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1.9</td>\n",
       "      <td>0.076</td>\n",
       "      <td>11.0</td>\n",
       "      <td>34.0</td>\n",
       "      <td>0.9978</td>\n",
       "      <td>3.51</td>\n",
       "      <td>0.56</td>\n",
       "      <td>9.4</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>7.8</td>\n",
       "      <td>0.88</td>\n",
       "      <td>0.00</td>\n",
       "      <td>2.6</td>\n",
       "      <td>0.098</td>\n",
       "      <td>25.0</td>\n",
       "      <td>67.0</td>\n",
       "      <td>0.9968</td>\n",
       "      <td>3.20</td>\n",
       "      <td>0.68</td>\n",
       "      <td>9.8</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>7.8</td>\n",
       "      <td>0.76</td>\n",
       "      <td>0.04</td>\n",
       "      <td>2.3</td>\n",
       "      <td>0.092</td>\n",
       "      <td>15.0</td>\n",
       "      <td>54.0</td>\n",
       "      <td>0.9970</td>\n",
       "      <td>3.26</td>\n",
       "      <td>0.65</td>\n",
       "      <td>9.8</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>11.2</td>\n",
       "      <td>0.28</td>\n",
       "      <td>0.56</td>\n",
       "      <td>1.9</td>\n",
       "      <td>0.075</td>\n",
       "      <td>17.0</td>\n",
       "      <td>60.0</td>\n",
       "      <td>0.9980</td>\n",
       "      <td>3.16</td>\n",
       "      <td>0.58</td>\n",
       "      <td>9.8</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>7.4</td>\n",
       "      <td>0.70</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1.9</td>\n",
       "      <td>0.076</td>\n",
       "      <td>11.0</td>\n",
       "      <td>34.0</td>\n",
       "      <td>0.9978</td>\n",
       "      <td>3.51</td>\n",
       "      <td>0.56</td>\n",
       "      <td>9.4</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   fixed acidity  volatile acidity  citric acid  residual sugar  chlorides  \\\n",
       "0            7.4              0.70         0.00             1.9      0.076   \n",
       "1            7.8              0.88         0.00             2.6      0.098   \n",
       "2            7.8              0.76         0.04             2.3      0.092   \n",
       "3           11.2              0.28         0.56             1.9      0.075   \n",
       "4            7.4              0.70         0.00             1.9      0.076   \n",
       "\n",
       "   free sulfur dioxide  total sulfur dioxide  density    pH  sulphates  \\\n",
       "0                 11.0                  34.0   0.9978  3.51       0.56   \n",
       "1                 25.0                  67.0   0.9968  3.20       0.68   \n",
       "2                 15.0                  54.0   0.9970  3.26       0.65   \n",
       "3                 17.0                  60.0   0.9980  3.16       0.58   \n",
       "4                 11.0                  34.0   0.9978  3.51       0.56   \n",
       "\n",
       "   alcohol  quality  \n",
       "0      9.4        5  \n",
       "1      9.8        5  \n",
       "2      9.8        5  \n",
       "3      9.8        6  \n",
       "4      9.4        5  "
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data = pd.read_csv('winequality-red.csv', sep=';')\n",
    "\n",
    "data.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Task 1 ** (1 point) <br/>\n",
    "* How much objects are in the sample?\n",
    "* What features describe the objects? How much these features?\n",
    "* What is feature a target variable?\n",
    "* What are their ranges?\n",
    "* Are there any missing values?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1599 objects in the sample\n",
      "Features are: fixed acidity, volatile acidity, citric acid, residual sugar, chlorides, free sulfur dioxide, total sulfur dioxide, density, pH, sulphates, alcohol, quality \n",
      "\n",
      "Amount of features is 12\n",
      "Target variable is quality\n",
      "\n",
      "fixed acidity has range from 4.6 to 15.9\n",
      "volatile acidity has range from 0.12 to 1.58\n",
      "citric acid has range from 0.0 to 1.0\n",
      "residual sugar has range from 0.9 to 15.5\n",
      "chlorides has range from 0.012 to 0.611\n",
      "free sulfur dioxide has range from 1.0 to 72.0\n",
      "total sulfur dioxide has range from 6.0 to 289.0\n",
      "density has range from 0.9900700000000001 to 1.00369\n",
      "pH has range from 2.74 to 4.01\n",
      "sulphates has range from 0.33 to 2.0\n",
      "alcohol has range from 8.4 to 14.9\n",
      "quality has range from 3 to 8\n",
      "\n",
      "fixed acidity           1599\n",
      "volatile acidity        1599\n",
      "citric acid             1599\n",
      "residual sugar          1599\n",
      "chlorides               1599\n",
      "free sulfur dioxide     1599\n",
      "total sulfur dioxide    1599\n",
      "density                 1599\n",
      "pH                      1599\n",
      "sulphates               1599\n",
      "alcohol                 1599\n",
      "quality                 1599\n",
      "dtype: int64\n",
      "As far as all features have the amount of not-nans equals to dataframe size, there are no missing values\n"
     ]
    }
   ],
   "source": [
    "print(data.shape[0], 'objects in the sample')\n",
    "print('Features are:', \", \".join(data.columns), '\\n')\n",
    "print('Amount of features is', len(data.columns))\n",
    "print('Target variable is quality\\n')\n",
    "for memb in data.columns:\n",
    "    print(memb, 'has range from', data[memb].min(), 'to', data[memb].max())\n",
    "print()\n",
    "print(data.count())\n",
    "print('As far as all features have the amount of not-nans equals to dataframe size, there are no missing values')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Task 2** (1 point)<br/>\n",
    "What features affect the target variable the most?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Correlation between quality and quality is 1.0\n",
      "Correlation between alcohol and quality is 0.4762\n",
      "Correlation between volatile acidity and quality is -0.3906\n",
      "Correlation between sulphates and quality is 0.2514\n",
      "Correlation between citric acid and quality is 0.2264\n",
      "Correlation between total sulfur dioxide and quality is -0.1851\n",
      "Correlation between density and quality is -0.1749\n",
      "Correlation between chlorides and quality is -0.1289\n",
      "Correlation between fixed acidity and quality is 0.1241\n",
      "Correlation between pH and quality is -0.0577\n",
      "Correlation between free sulfur dioxide and quality is -0.0507\n",
      "Correlation between residual sugar and quality is 0.0137\n",
      "As we can see, alcohol, volatile acidity and sulphates have the highest correlations with quality, while volatile acidity has the highest (or lowest, counting sign) negative correlation - so we can see inverse dependency\n"
     ]
    }
   ],
   "source": [
    "cols = sorted(data.columns, key=lambda memb: abs(data.quality.corr(data[memb])), reverse=True) \n",
    "for memb in cols:\n",
    "    print('Correlation between', memb, 'and quality is', np.round(data.quality.corr(data[memb]), 4))\n",
    "# As we can see, correlation between the target itself is 1.0 - as it should be.\n",
    "print('As we can see, alcohol, volatile acidity and sulphates have the highest correlations with quality, while volatile acidity has the highest (or lowest, counting sign) negative correlation - so we can see inverse dependency')    \n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
